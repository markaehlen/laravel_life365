{"version":3,"file":"assets/chunks/7148.js?id=0d5b051fb5c234ee","mappings":"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","sources":["webpack:///resources/js/app/Pages/ConcreteMixture/OnlySLXSection.vue","webpack:///./resources/js/app/Pages/ConcreteMixture/OnlySLXSection.vue?5b6c","webpack:///./resources/js/app/Pages/ConcreteMixture/OnlySLXSection.vue","webpack:///./resources/js/app/Pages/ConcreteMixture/OnlySLXSection.vue?e45a","webpack:///resources/js/app/Shared/KonvaSLXSectionPlot.vue","webpack:///./resources/js/app/Shared/KonvaSLXSectionPlot.vue?6c8e","webpack:///./resources/js/app/Shared/KonvaSLXSectionPlot.vue","webpack:///./resources/js/app/Shared/KonvaSLXSectionPlot.vue?9390","webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js"],"sourcesContent":["<template>\r\n    <KonvaSLXSectionPlot \r\n        :plotType=\"structure\"\r\n        :projectData=\"projectData.project.projectData\"\r\n        :units=\"this.serviceLifeResults.results['Cross-Section Graph'].results[activeAlternativeName].units\"\r\n        :concUnits=\"this.serviceLifeResults.results['Cross-Section Graph'].results[activeAlternativeName].concentrationUnits\"\r\n        :maxConc=\"this.serviceLifeResults.results['Cross-Section Graph'].results[activeAlternativeName].maxConcentration\"\r\n        :allPoints=\"this.serviceLifeResults.results['Cross-Section Graph'].results[activeAlternativeName].allPoints\"\r\n        :thickness=\"this.serviceLifeResults.results['Cross-Section Graph'].results[activeAlternativeName].overallThickness\"\r\n        :clearCover=\"this.serviceLifeResults.results['Cross-Section Graph'].results[activeAlternativeName].clearCover\"\r\n        :iCurrentlyDisplayedMonth=\"this.serviceLifeResults.results['Cross-Section Graph'].results[activeAlternativeName].iMonthOfInit\"\r\n        :justSection=\"false\"\r\n    />\r\n  </template>\r\n  \r\n<script>\r\nimport KonvaSLXSectionPlot from '@app/Shared/KonvaSLXSectionPlot'\r\n\r\nexport default {\r\n  metaInfo: { title: 'Concrete Mixtures' },\r\n  components: {\r\n    KonvaSLXSectionPlot,\r\n  },\r\n//   layout: Layout,\r\n  props: {\r\n    projectData: Object,\r\n    serviceLifeResults: Object,\r\n    rebarSteelTypes: Object,\r\n    inhibitors: Object,\r\n    barrierTypes: Object,\r\n    colors: [Object, Array],\r\n  },\r\n  computed: {},\r\n  mounted() {\r\n  },\r\n  created() {},\r\n  data() {\r\n    return {\r\n      userAgent: this.$page.props.isMobile,\r\n      //All Units\r\n      area_unit: null,\r\n      volume_unit: null,\r\n      capacity_unit: null,\r\n      weight_unit: null,\r\n      //Select Options\r\n      rebarSteelTypesOptions: this.rebarSteelTypes,\r\n      inhibitorsOptions: this.inhibitors,\r\n      serviceLifeGraphs: this.serviceLifeResults.results,\r\n    //   baseUnit: this.serviceLifeResults.results['Cross-Section Graph'].results['Sample 1'].units,\r\n        structure: this.projectData.project.projectData.typeOfStructure,\r\n        // baseUnits: this.projectData.project.projectData.baseUnits,\r\n        concUnits: this.projectData.project.projectData.concentrationUnits,\r\n        alternatives: this.projectData.project.projectData.alts.alt,\r\n        activeAlternativeName: this.projectData.project.projectData.alts.alt[0].alternative.name,\r\n        activeAlternativeDesc: this.projectData.project.projectData.alts.alt[0].alternative.description,\r\n      barrierTypesOptions: this.barrierTypes,\r\n      visibleGraph: 'service-life',\r\n      defaultColDef: {\r\n        flex: 1,\r\n      },\r\n      altColors: this.colors,\r\n      activeAlternativeIndex: 0,\r\n      needToRegenerateGraphs: false,\r\n      needToCompute: false,\r\n    }\r\n  },\r\n  methods: {\r\n   \r\n  },\r\n}\r\n</script>\r\n","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5[0].rules[0].use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./OnlySLXSection.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5[0].rules[0].use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./OnlySLXSection.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./OnlySLXSection.vue?vue&type=template&id=59a6191e&\"\nimport script from \"./OnlySLXSection.vue?vue&type=script&lang=js&\"\nexport * from \"./OnlySLXSection.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('KonvaSLXSectionPlot',{attrs:{\"plotType\":_vm.structure,\"projectData\":_vm.projectData.project.projectData,\"units\":this.serviceLifeResults.results['Cross-Section Graph'].results[_vm.activeAlternativeName].units,\"concUnits\":this.serviceLifeResults.results['Cross-Section Graph'].results[_vm.activeAlternativeName].concentrationUnits,\"maxConc\":this.serviceLifeResults.results['Cross-Section Graph'].results[_vm.activeAlternativeName].maxConcentration,\"allPoints\":this.serviceLifeResults.results['Cross-Section Graph'].results[_vm.activeAlternativeName].allPoints,\"thickness\":this.serviceLifeResults.results['Cross-Section Graph'].results[_vm.activeAlternativeName].overallThickness,\"clearCover\":this.serviceLifeResults.results['Cross-Section Graph'].results[_vm.activeAlternativeName].clearCover,\"iCurrentlyDisplayedMonth\":this.serviceLifeResults.results['Cross-Section Graph'].results[_vm.activeAlternativeName].iMonthOfInit,\"justSection\":false}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div id=\"figureCanvas\">\r\n        <v-stage ref=\"slsxStage\" :config=\"configKonva\">\r\n        </v-stage>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  inheritAttrs: false,\r\n  props: {\r\n      units: String,\r\n      concUnits: String,\r\n      justSection: Boolean,\r\n      plotType: String,\r\n      maxConc: Number,\r\n      allPoints: Array,\r\n      thickness: Number,\r\n      clearCover: Number,\r\n      iCurrentlyDisplayedMonth: Number,\r\n    projectData: Object,\r\n  },\r\n  data() {\r\n    return {\r\n      configKonva: {\r\n        width: 1000,\r\n        height: 200,\r\n      },\r\n      dFactor: 1.0,\r\n    //   plotType: this.plotType,\r\n    maxModelDepth:null,\r\n    currentlyDisplayedMonth:null,\r\n    dDepthToServiceLifeModeledLine:null,\r\n      area_unit: null,\r\n      volume_unit: null,\r\n      capacity_unit: null,\r\n      weight_unit: null,\r\n      length_unit: null,\r\n      standard_length_unit: null,\r\n      font_size_nrml: 15,\r\n      font_size_small: 15,\r\n    }\r\n  },\r\n  mounted() {\r\n    // this.thickness=300;\r\n    var stage = this.$refs.slsxStage.getNode();\r\n      // var alllayer = new Konva.Layer();\r\n    // var circle = new Konva.Circle({\r\n    //     x: 100,\r\n    //     y: 100,\r\n    //     radius: 70,\r\n    //     fill: 'red',\r\n    //     stroke: 'black',\r\n    //     strokeWidth: 4,\r\n    //   });\r\n    //   layer.add(circle);\r\n    //   stage.add(layer);\r\n    var monthmatrixlayer = new Konva.Layer();\r\n    this.currentlyDisplayedMonth=this.iCurrentlyDisplayedMonth;\r\n    const container = document.querySelector('#figureCanvas')\r\n    this.configKonva.width = container.offsetWidth\r\nif (this.plotType==\"slabs and walls (1-D)\") {\r\n    this.configKonva.height = (container.offsetWidth*0.30>container.offsetHeight?container.offsetHeight:container.offsetWidth*0.30)\r\n}else{\r\n  // this.configKonva.height = container.offsetHeight\r\n  this.configKonva.height = (container.offsetWidth*0.70>container.offsetHeight?container.offsetHeight:container.offsetWidth*0.70)\r\n}\r\n\r\nif(this.configKonva.height<'100'){\r\n  this.font_size_nrml=12;\r\n}\r\n    if(this.concUnits==\"kg/cub. m.\"){\r\n        this.dFactor=this.convertPctConc_to_KgPerM3(1.0)\r\n    }\r\n    if(this.concUnits==\"lb/cub. yd.\"){\r\n        this.dFactor=this.convertPctConc_to_LbsPerY3(1.0)\r\n    }\r\n\r\n    this.maxModelDepth=this.getMaximumModelableDepthGivenConcTypeAndUnits(this.projectData)\r\n    if(this.thickness>this.maxModelDepth){\r\n        this.dDepthToServiceLifeModeledLine=this.maxModelDepth\r\n    }\r\n    \r\n    this.getRedefinedUnits(this.projectData.baseUnits)\r\n\r\n    // ------------------\r\n    if (this.currentlyDisplayedMonth == 0) {\r\n       this.currentlyDisplayedMonth = 1;\r\n     }\r\n\r\n    var TOP_BORDER = parseInt(this.configKonva.height / 5.0);\r\n    var BOTTOM_BORDER = parseInt(this.configKonva.height / 5.0);\r\n    var SIDE_BORDER = 2 * BOTTOM_BORDER;\r\n    var RIGHT_SIDE_INSET = parseInt(this.configKonva.height / 15.0);\r\n    var ONE_HALF_SCRATCH_TICK = RIGHT_SIDE_INSET / 3;\r\n    var topOfConc = 0, bottomOfConc = 0, leftOfConc = 0, centerX = 0, rightOfConc = 0, widthOfConc = 0;\r\n    var heightOfConc = 0, circleDiam = 0, rebarLayoutDiam = 0;\r\n    var rebarDiam = 5;\r\n\r\n    // -------- step 1 base shape creating ------\r\n\r\n     if (this.plotType==\"slabs and walls (1-D)\") {\r\n       topOfConc = TOP_BORDER;\r\n       bottomOfConc = this.configKonva.height - BOTTOM_BORDER;\r\n       leftOfConc = parseInt(SIDE_BORDER * 2.0);\r\n       rightOfConc = this.configKonva.width - parseInt(SIDE_BORDER * 1.7);\r\n       widthOfConc = rightOfConc - leftOfConc;\r\n       heightOfConc = bottomOfConc - topOfConc; \r\n\r\n       monthmatrixlayer.add(new Konva.Rect({\r\n          x: leftOfConc,\r\n          y: topOfConc,\r\n          width: widthOfConc,\r\n          height: heightOfConc,\r\n        //   shadowBlur: 10,\r\n        //   fill: '#D3D3D3',\r\n          stroke: 'black',\r\n          strokeWidth: 1,\r\n        }));\r\n        var  heightOfReinfLine = parseInt(Math.abs(topOfConc - bottomOfConc) * this.clearCover / this.thickness);\r\n        var  heightOfSlLine = parseInt(Math.abs(topOfConc - bottomOfConc) * this.dDepthToServiceLifeModeledLine / this.thickness);\r\n       if (this.dDepthToServiceLifeModeledLine < this.thickness && this.dDepthToServiceLifeModeledLine > 0.0) {\r\n         var  horzCenterLine = parseInt((leftOfConc + rightOfConc) / 2.0);\r\n         \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [horzCenterLine - 5, topOfConc + heightOfSlLine, horzCenterLine + 5, topOfConc + heightOfSlLine],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [horzCenterLine, topOfConc, horzCenterLine, topOfConc + heightOfSlLine],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [horzCenterLine + ONE_HALF_SCRATCH_TICK, topOfConc - ONE_HALF_SCRATCH_TICK, horzCenterLine - ONE_HALF_SCRATCH_TICK, topOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [horzCenterLine + ONE_HALF_SCRATCH_TICK, topOfConc + heightOfSlLine - ONE_HALF_SCRATCH_TICK, horzCenterLine - ONE_HALF_SCRATCH_TICK, topOfConc + heightOfSlLine + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Text({\r\n            x: horzCenterLine,\r\n            y: topOfConc - 20,\r\n            text: `Modeled Depth - ${this.dDepthToServiceLifeModeledLine} ${this.units}`,\r\n            fontSize: this.font_size_nrml,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n         }));\r\n       } \r\n\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 10, topOfConc, leftOfConc - 5, topOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 10, bottomOfConc, leftOfConc - 5, bottomOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5, topOfConc, rightOfConc + 5 + 10, topOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc - RIGHT_SIDE_INSET, topOfConc + heightOfReinfLine, rightOfConc + 5 + 10, topOfConc + heightOfReinfLine],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n       \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 5, topOfConc, leftOfConc - 5 - 5, bottomOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5 + 5, topOfConc, rightOfConc + 5 + 5, topOfConc + heightOfReinfLine],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n      \r\n      \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 5 + ONE_HALF_SCRATCH_TICK, topOfConc - ONE_HALF_SCRATCH_TICK, leftOfConc - 5 - 5 - ONE_HALF_SCRATCH_TICK, topOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         \r\n         \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 5 + ONE_HALF_SCRATCH_TICK, bottomOfConc - ONE_HALF_SCRATCH_TICK, leftOfConc - 5 - 5 - ONE_HALF_SCRATCH_TICK, bottomOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n       \r\n       \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5 + 5 + ONE_HALF_SCRATCH_TICK, topOfConc - ONE_HALF_SCRATCH_TICK, rightOfConc + 5 + 5 - ONE_HALF_SCRATCH_TICK, topOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5 + 5 + ONE_HALF_SCRATCH_TICK, topOfConc + heightOfReinfLine - ONE_HALF_SCRATCH_TICK, rightOfConc + 5 + 5 - ONE_HALF_SCRATCH_TICK, topOfConc + heightOfReinfLine + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n        monthmatrixlayer.add(new Konva.Text({\r\n            x: leftOfConc - 30,\r\n            y: (topOfConc + bottomOfConc) * 0.7,\r\n            text: parseFloat(this.thickness).toFixed(2) + \" \" + this.units,\r\n            fontSize: this.font_size_nrml,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n            rotation: 270,\r\n         }));\r\n        monthmatrixlayer.add(new Konva.Text({\r\n            x: rightOfConc + 5 + 10,\r\n            y: topOfConc + heightOfReinfLine / 2-10,\r\n            text: parseFloat(this.clearCover).toFixed(2) + \"\\n\" + this.units,\r\n            fontSize: this.font_size_nrml,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n         }));\r\n\r\n    }else if(this.plotType==\"square column/beams (2-D)\") {\r\n       topOfConc = TOP_BORDER;\r\n       bottomOfConc = this.configKonva.height - BOTTOM_BORDER;0       \r\n       leftOfConc = parseInt((this.configKonva.width - bottomOfConc - topOfConc) / 2);\r\n       rightOfConc = this.configKonva.width - leftOfConc;\r\n       heightOfConc = bottomOfConc - topOfConc;\r\n       widthOfConc = heightOfConc;\r\n\r\n       rightOfConc = leftOfConc + widthOfConc;\r\n        monthmatrixlayer.add(new Konva.Rect({\r\n          x: leftOfConc,\r\n          y: topOfConc,\r\n          width: widthOfConc,\r\n          height: heightOfConc,\r\n        //   shadowBlur: 10,\r\n        //   fill: '#D3D3D3',\r\n          stroke: 'black',\r\n          strokeWidth: 1,\r\n        }))\r\n       var iDepth2Reinf = parseInt(Math.abs(topOfConc - bottomOfConc) * this.clearCover / this.thickness);\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 10, topOfConc, leftOfConc - 5, topOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 10, bottomOfConc, leftOfConc - 5, bottomOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5, topOfConc, rightOfConc + 5 + 10, topOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc - RIGHT_SIDE_INSET, topOfConc + iDepth2Reinf, rightOfConc + 5 + 10, topOfConc + iDepth2Reinf],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 5, topOfConc, leftOfConc - 5 - 5, bottomOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5 + 5, topOfConc, rightOfConc + 5 + 5, topOfConc + iDepth2Reinf],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n        \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 5 + ONE_HALF_SCRATCH_TICK, topOfConc - ONE_HALF_SCRATCH_TICK, leftOfConc - 5 - 5 - ONE_HALF_SCRATCH_TICK, topOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftOfConc - 5 - 5 + ONE_HALF_SCRATCH_TICK, bottomOfConc - ONE_HALF_SCRATCH_TICK, leftOfConc - 5 - 5 - ONE_HALF_SCRATCH_TICK, bottomOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5 + 5 + ONE_HALF_SCRATCH_TICK, topOfConc - ONE_HALF_SCRATCH_TICK, rightOfConc + 5 + 5 - ONE_HALF_SCRATCH_TICK, topOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         \r\n         monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightOfConc + 5 + 5 + ONE_HALF_SCRATCH_TICK, topOfConc + iDepth2Reinf - ONE_HALF_SCRATCH_TICK, rightOfConc + 5 + 5 - ONE_HALF_SCRATCH_TICK, topOfConc + iDepth2Reinf + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n       \r\n      //  String text = String.valueOf(this.df.format(this.thickness)) + \" \" + this.units;\r\n      //  g2d.drawChars(text.toCharArray(), 0, text.length(), leftOfConc - 5 - 60, (\r\n      //      topOfConc + bottomOfConc) / 2);\r\n      monthmatrixlayer.add(new Konva.Text({\r\n            x: leftOfConc - 30,\r\n            y: (topOfConc + bottomOfConc) * 0.65,\r\n            text: parseFloat(this.thickness).toFixed(2) + \" \" + this.units,\r\n            fontSize: this.font_size_nrml,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n            rotation: 270,\r\n         }));\r\n      //  text = String.valueOf(this.df.format(this.clearCover)) + \" \" + this.units;\r\n      //  g2d.drawChars(text.toCharArray(), 0, text.length(), rightOfConc + 5 + 10, \r\n      //      topOfConc + iDepth2Reinf / 2);\r\n      monthmatrixlayer.add(new Konva.Text({\r\n            x: rightOfConc + 5 + 10,\r\n            y: topOfConc + iDepth2Reinf / 5,\r\n            text: parseFloat(this.clearCover).toFixed(2) + \" \" + this.units,\r\n            fontSize: this.font_size_nrml,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n         }));\r\n     }\r\n\r\n     else if (this.plotType==\"circular columns (2-D)\") {\r\n       topOfConc = TOP_BORDER;\r\n       bottomOfConc = this.configKonva.height - BOTTOM_BORDER;\r\n       leftOfConc = parseInt((this.configKonva.width - bottomOfConc - topOfConc) / 2);\r\n       rightOfConc = this.configKonva.width - leftOfConc;\r\n       heightOfConc = bottomOfConc - topOfConc;\r\n       widthOfConc = heightOfConc;\r\n       \r\n       centerX = parseInt((leftOfConc + rightOfConc) / 2);\r\n       var centerY = parseInt((topOfConc + bottomOfConc) / 2);\r\n       circleDiam = bottomOfConc - topOfConc;\r\n       rebarLayoutDiam = parseInt(circleDiam * (this.thickness - this.clearCover * 2) / this.thickness);\r\n       \r\n      \r\n       var outerBand = topOfConc + circleDiam / 2 - rebarLayoutDiam / 2;\r\n      //  g2d.drawOval(parseInt(centerX - circleDiam / 2), parseInt(centerY - circleDiam / 2), circleDiam, circleDiam);\r\n      monthmatrixlayer.add(new Konva.Ellipse({\r\n                x: parseInt(centerX),\r\n                y: parseInt(centerY),\r\n                radiusX: circleDiam/2,\r\n                radiusY: circleDiam/2,\r\n                // fill: '#D3D3D3',\r\n                stroke: 'black',\r\n                strokeWidth: 1,\r\n              }));\r\n       \r\n       var leftEdge = parseInt(centerX - circleDiam / 2);\r\n       var rightEdge = parseInt(centerX + circleDiam / 2);\r\n      monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftEdge - 5 - 10, topOfConc, leftEdge - 5, topOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n      monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftEdge - 5 - 10, bottomOfConc, leftEdge - 5, bottomOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n      monthmatrixlayer.add(new Konva.Line({\r\n            points: [centerX + 15, topOfConc, rightEdge + 5 + 10, topOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n      monthmatrixlayer.add(new Konva.Line({\r\n            points: [centerX + rebarLayoutDiam / 2 - 5, outerBand, rightEdge + 5 + 10, outerBand],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n       \r\n        monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftEdge - 5 - 5, topOfConc, leftEdge - 5 - 5, bottomOfConc],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n        monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightEdge + 5 + 5, topOfConc, rightEdge + 5 + 5, outerBand],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n         \r\n        monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftEdge - 5 - 5 + ONE_HALF_SCRATCH_TICK, topOfConc - ONE_HALF_SCRATCH_TICK, leftEdge - 5 - 5 - ONE_HALF_SCRATCH_TICK, topOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n        monthmatrixlayer.add(new Konva.Line({\r\n            points: [leftEdge - 5 - 5 + ONE_HALF_SCRATCH_TICK, bottomOfConc - ONE_HALF_SCRATCH_TICK, leftEdge - 5 - 5 - ONE_HALF_SCRATCH_TICK, bottomOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n        monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightEdge + 5 + 5 + ONE_HALF_SCRATCH_TICK, topOfConc - ONE_HALF_SCRATCH_TICK, rightEdge + 5 + 5 - ONE_HALF_SCRATCH_TICK, topOfConc + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n        monthmatrixlayer.add(new Konva.Line({\r\n            points: [rightEdge + 5 + 5 + ONE_HALF_SCRATCH_TICK, outerBand - ONE_HALF_SCRATCH_TICK, rightEdge + 5 + 5 - ONE_HALF_SCRATCH_TICK, outerBand + ONE_HALF_SCRATCH_TICK],\r\n            stroke: 'black',\r\n            strokeWidth: 1,\r\n         }));\r\n      //  String text = String.valueOf(this.df.format(this.thickness)) + \" \" + this.units;\r\n      //  g2d.drawChars(text.toCharArray(), 0, text.length(), leftEdge - 5 - 120, (topOfConc + bottomOfConc) / 2);\r\n      //  text = String.valueOf(this.df.format(this.clearCover)) + \" \" + this.units;\r\n      //  g2d.drawChars(text.toCharArray(), 0, text.length(), rightEdge + 5 + 10, topOfConc + (bottomOfConc - topOfConc) / 10);\r\n      monthmatrixlayer.add(new Konva.Text({\r\n            x: leftEdge - 5 - 25,\r\n            y: (topOfConc + bottomOfConc) * 0.7,\r\n            text: parseFloat(this.thickness).toFixed(2) + \" \" + this.units,\r\n            fontSize: this.font_size_nrml,\r\n            rotation: 270,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n         }));\r\n      monthmatrixlayer.add(new Konva.Text({\r\n            x: rightEdge + 5 + 10,\r\n            y: topOfConc + (bottomOfConc - topOfConc) / 10 -5,\r\n            text: parseFloat(this.clearCover).toFixed(2) + \" \" + this.units,\r\n            fontSize: this.font_size_nrml,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n         }));\r\n     } \r\n \r\n    // -------- step 1 base shape creating ------\r\n    // -------- step 2 Filling Month Mtrix Colors ------\r\n    \r\n    if (!this.justSection)\r\n     {\r\n      if (this.plotType==\"circular columns (2-D)\") {\r\n          var minConc = 1.0E10;\r\n          for (var tm = 0; tm < this.allPoints.length; tm++) {  \r\n          var myMatrix = this.allPoints[tm].data;\r\n          for (var i = 0; i < myMatrix.length; i++) {\r\n              for (var j = 0; j < myMatrix[i].length; j++)\r\n              {\r\n              minConc = Math.min(minConc, myMatrix[i][j]);\r\n              }\r\n          } \r\n          } \r\n          var m = this.allPoints[this.currentlyDisplayedMonth - 1].data;\r\n          minConc *= this.dFactor;\r\n          minConc = Math.max(0.0, minConc);\r\n          for (var c = leftEdge - 2; c < (leftEdge + rightEdge) / 2 + 2; c++) {  \r\n          for (var r = topOfConc - 1; r < (topOfConc + bottomOfConc) / 2 + 2; r++) {    \r\n              var colFrac = (c - leftEdge) / (rightEdge / 2 - leftEdge / 2);\r\n              var rowFrac = (r - topOfConc) / (bottomOfConc / 2 - topOfConc / 2);\r\n              colFrac = Math.min(1, colFrac);\r\n              rowFrac = Math.min(1, rowFrac);    \r\n              var matrixCol = parseInt(colFrac * m[0].length - 2);\r\n              var matrixRow = parseInt(rowFrac * m.length - 2);\r\n              matrixCol = Math.max(0, Math.min(matrixCol, m[0].length - 2));\r\n              matrixRow = Math.max(0, Math.min(matrixRow, m.length - 2));    \r\n              var conc = m[matrixRow][matrixCol];\r\n              conc *= this.dFactor;\r\n              var colorIntensity = (conc - minConc) / (this.maxConc - minConc) * 255.0;\r\n              colorIntensity = Math.max(0.0, Math.min(255.0, colorIntensity));\r\n              // g2d.setColor(this.getColor(colorIntensity));\r\n              // var radius = (topOfConc + bottomOfConc) / 2.0 + 1.0 - (topOfConc + 1);\r\n              var radius = circleDiam/2;\r\n              var a = (leftEdge + rightEdge) / 2.0 + 1.0 - c;\r\n              var b = (topOfConc + bottomOfConc) / 2.0 + 1.0 - r;\r\n              var computedDistance = Math.pow(Math.pow(a, 2.0) + Math.pow(b, 2.0), 0.5);    \r\n              if (computedDistance <= radius) {     \r\n                // g2d.fillRect(c, r, 1, 1);\r\n                monthmatrixlayer.add(new Konva.Rect({\r\n                    x: c,\r\n                    y: r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n                // g2d.fillRect(rightEdge - c - leftEdge + 1, r, 1, 1);\r\n                monthmatrixlayer.add(new Konva.Rect({\r\n                    x: leftEdge+rightEdge - c,\r\n                    y: r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n                // // g2d.fillRect(rightEdge - c - leftEdge + 1, bottomOfConc - r - topOfConc + 1, 1, 1);\r\n                monthmatrixlayer.add(new Konva.Rect({\r\n                    x: leftEdge+rightEdge - c,\r\n                    y: topOfConc+bottomOfConc - r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n                monthmatrixlayer.add(new Konva.Rect({\r\n                    x: c,\r\n                    y: topOfConc+bottomOfConc - r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n              // g2d.fillRect(c, bottomOfConc - r - topOfConc + 1, 1, 1);\r\n              } \r\n          } \r\n          } \r\n      } else if (this.plotType==\"square column/beams (2-D)\") {\r\n         var minConc = 1.0E10;\r\n         for (var tm = 0; tm < this.allPoints.length; tm++) {\r\n           var myMatrix = this.allPoints[tm].data;\r\n           for (var i = 0; i < myMatrix.length; i++) {\r\n             for (var j = 0; j < myMatrix[i].length; j++)\r\n             {\r\n               minConc = Math.min(minConc, myMatrix[i][j]);\r\n             }\r\n           } \r\n         }\r\n        var m = this.allPoints[this.currentlyDisplayedMonth - 1].data;\r\n        minConc *= this.dFactor;         \r\n         for (var c = leftOfConc + 1; c < (leftOfConc + rightOfConc) / 2 + 3; c++)\r\n         {\r\n           for (var r = topOfConc + 1; r < (topOfConc + bottomOfConc) / 2 + 3; r++)\r\n           {\r\n             var colFrac = (c - leftOfConc - 1) / (rightOfConc / 2 - leftOfConc / 2);\r\n             var rowFrac = (r - topOfConc - 1) / (bottomOfConc / 2 - topOfConc / 2);\r\n             colFrac = Math.min(1, colFrac);\r\n             rowFrac = Math.min(1, rowFrac);             \r\n             var matrixCol = parseInt(colFrac * m[0].length);\r\n             var matrixRow = parseInt(rowFrac * m.length);             \r\n             matrixCol = Math.max(0, Math.min(matrixCol, m[0].length - 2));\r\n             matrixRow = Math.max(0, Math.min(matrixRow, m.length - 2));             \r\n             var conc = m[matrixRow][matrixCol];\r\n             conc *= this.dFactor;\r\n             var colorIntensity = (conc - minConc) / (this.maxConc - minConc) * 255;\r\n             colorIntensity = Math.max(0, Math.min(255, colorIntensity));\r\n            //  g2d.setColor(getColor(colorIntensity));\r\n             \r\n            //  g2d.fillRect(c, r, 1, 1);\r\n            monthmatrixlayer.add(new Konva.Rect({\r\n                    x: c,\r\n                    y: r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n            //  g2d.fillRect(rightOfConc - c - leftOfConc + 1, r, 1, 1);\r\n            monthmatrixlayer.add(new Konva.Rect({\r\n                    x: leftOfConc+rightOfConc - c,\r\n                    y: r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n            //  g2d.fillRect(rightOfConc - c - leftOfConc + 1, bottomOfConc - r - topOfConc + 1, 1, 1);\r\n            monthmatrixlayer.add(new Konva.Rect({\r\n                    x: leftOfConc+rightOfConc - c,\r\n                    y: topOfConc+bottomOfConc - r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n            //  g2d.fillRect(c, bottomOfConc - r - topOfConc + 1, 1, 1);\r\n            monthmatrixlayer.add(new Konva.Rect({\r\n                    x: c,\r\n                    y: topOfConc+bottomOfConc - r,\r\n                    width: 1,\r\n                    height: 1,\r\n                    fill: this.getColor(colorIntensity),\r\n                }));\r\n           }\r\n         \r\n         }\r\n       \r\n       } else if (this.plotType==\"slabs and walls (1-D)\") {\r\n        let minConc = 1.0E10;\r\n        for (let tm = 0; tm < this.allPoints.length; tm++) {\r\n          let myMatrix = this.allPoints[tm].data;\r\n          for (let j = 0; j < myMatrix.length; j++)\r\n          {\r\n            minConc = Math.min(minConc, myMatrix[j][0]);\r\n          }\r\n        }\r\n        let m = this.allPoints[this.currentlyDisplayedMonth - 1].data;\r\n        minConc *= this.dFactor;\r\n        for (let i = topOfConc + 1; i < topOfConc + heightOfConc; i++) {           \r\n           let percentDepth = (i - topOfConc - 1) / (topOfConc + heightOfConc - topOfConc - 1);\r\n           let closestDepthRow = parseInt(percentDepth * m.length - 1);\r\n           closestDepthRow = Math.max(0, Math.min(closestDepthRow, m.length - 1));\r\n           let conc = m[closestDepthRow][0];\r\n           conc *= this.dFactor;\r\n           let colorIntensity = (conc - minConc) / (this.maxConc - minConc) * 255;\r\n           colorIntensity = Math.max(0, Math.min(255, colorIntensity));\r\n            //g2d.setColor(getColor(colorIntensity));\r\n            //g2d.drawLine(leftOfConc + 1, i, leftOfConc + widthOfConc - 1, i);\r\n            monthmatrixlayer.add(new Konva.Line({\r\n                points: [leftOfConc + 1, i, leftOfConc + widthOfConc - 1, i],\r\n                stroke: this.getColor(colorIntensity),\r\n                strokeWidth: 1,\r\n            }));\r\n         } \r\n       }\r\n      \r\n     }\r\n    \r\n    // -------- step 2 Filling Month Mtrix Colors ------\r\n\r\n    // -------- step 3 Adding Scale to canvas ------\r\n\r\n    if (!this.justSection) {\r\n             var lleft = parseInt(SIDE_BORDER * 1);\r\n       var ltop = topOfConc;\r\n       var lbottom = bottomOfConc;\r\n       var lwidth = parseInt(SIDE_BORDER / 6);\r\n       var lheight = lbottom - ltop;\r\n       var LEGEND_SPACE = 50;\r\n// scaleTextList\r\n    monthmatrixlayer.add(new Konva.Rect({\r\n        x: lleft,\r\n        y: ltop,\r\n        width: lwidth,\r\n        height: lheight,\r\n        // fill: this.getColor(colorIntensity),\r\n        stroke: 'black',\r\n        strokeWidth: 1,\r\n    }));\r\n       \r\n       var STEPS = 6; var i;\r\n       for (i = 0; i < 7; i++) {\r\n         var x = lleft - 50;\r\n         var y = ltop + parseInt(i / 6 * lheight);\r\n         var amt = (6 - i) / 6 * this.maxConc;\r\n        //  String text1 = this.df.format(amt);\r\n        //  g2d.drawChars(text1.toCharArray(), 0, text1.length(), x, y + 5);\r\n        //  g2d.drawLine(lleft - 10, y, lleft, y);\r\n        monthmatrixlayer.add(new Konva.Text({\r\n            x: x,\r\n            y: y-5,\r\n            text: parseFloat(amt).toFixed(2),\r\n            fontSize: this.font_size_small,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n         }));\r\n          monthmatrixlayer.add(new Konva.Line({\r\n              points: [lleft - 10, y, lleft, y],\r\n              stroke: 'black',\r\n              strokeWidth: 1,\r\n          }));\r\n       } \r\n       \r\n       for (i = ltop + 1; i < lbottom; i++) {\r\n         var colorIntensity = (1 - (i - ltop + 1) / (lbottom - ltop)) * 255;\r\n         colorIntensity = Math.max(0, Math.min(255, colorIntensity));\r\n        //  g2d.setColor(getColor(colorIntensity));\r\n        //  g2d.drawLine(lleft + 1, i, lleft + lwidth - 1, i);\r\n        monthmatrixlayer.add(new Konva.Line({\r\n              points: [lleft + 1, i, lleft + lwidth - 1, i],\r\n              stroke: this.getColor(colorIntensity),\r\n              strokeWidth: 1,\r\n          }));\r\n       } \r\n    //    g2d.setColor(Color.black);\r\n    //    String text = \"Concentration (\" + this.sConcUnits + \")\";\r\n    //    g2d.drawChars(text.toCharArray(), 0, text.length(), lleft - 2 * text.length(), ltop - 20);\r\n    monthmatrixlayer.add(new Konva.Text({\r\n            x: lleft - 50,\r\n            y: ltop - 34,\r\n            text: \"Concentration \\n (\" + this.concUnits + \")\",\r\n            fontSize: this.font_size_small,\r\n            fontFamily: 'Calibri',\r\n            fill: 'black',\r\n            align: 'center',\r\n         }));\r\n    }\r\n\r\n    // -------- step 3 Adding Scale to canvas ------\r\n\r\n    // -------- step 4 Adding Rebbers/pillers ------\r\n    \r\n     if (this.justSection) {\r\n       var reberColor='black';\r\n     } else {\r\n       var reberColor='white';\r\n     } \r\n\r\n          if (this.plotType==\"slabs and walls (1-D)\") {\r\n       var depth2reinf = parseInt(Math.abs(topOfConc - bottomOfConc) * this.clearCover / this.thickness);       \r\n    //    g2d.drawOval(leftOfConc + 25, topOfConc + depth2reinf, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n    //    g2d.drawOval(rightOfConc - 25 - RIGHT_SIDE_INSET, topOfConc + depth2reinf, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);    \r\n    monthmatrixlayer.add(new Konva.Circle({\r\n      x: leftOfConc + 25,\r\n      y: topOfConc + depth2reinf + (RIGHT_SIDE_INSET/2),\r\n      radius: RIGHT_SIDE_INSET/2,\r\n      // fill: reberColor,\r\n      stroke: reberColor,\r\n      strokeWidth: 1,\r\n    }));\r\n    monthmatrixlayer.add(new Konva.Circle({\r\n      x: rightOfConc - 25,\r\n      y: topOfConc + depth2reinf + (RIGHT_SIDE_INSET/2),\r\n      radius: RIGHT_SIDE_INSET/2,\r\n      // fill: reberColor,\r\n      stroke: reberColor,\r\n      strokeWidth: 1,\r\n    }));\r\n    \r\n       if (this.clearCover < 0.4 * this.thickness) {\r\n        //  g2d.drawOval(leftOfConc + 25, bottomOfConc - depth2reinf - RIGHT_SIDE_INSET, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n        //  g2d.drawOval(rightOfConc - 25 - RIGHT_SIDE_INSET, bottomOfConc - depth2reinf - RIGHT_SIDE_INSET, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n        monthmatrixlayer.add(new Konva.Circle({\r\n          x: leftOfConc + 25,\r\n          y: bottomOfConc - depth2reinf - (RIGHT_SIDE_INSET/2),\r\n          radius: RIGHT_SIDE_INSET/2,\r\n          // fill: reberColor,\r\n          stroke: reberColor,\r\n          strokeWidth: 1,\r\n        }));\r\n        monthmatrixlayer.add(new Konva.Circle({\r\n          x: rightOfConc - 25,\r\n          y: bottomOfConc - depth2reinf -(RIGHT_SIDE_INSET/2),\r\n          radius: RIGHT_SIDE_INSET/2,\r\n          // fill: reberColor,\r\n          stroke: reberColor,\r\n          strokeWidth: 1,\r\n        }));\r\n       } else {\r\n         var bottomDist = parseInt((topOfConc + depth2reinf + RIGHT_SIDE_INSET + bottomOfConc) / 2) + parseInt(RIGHT_SIDE_INSET / 2);\r\n        //  g2d.drawOval(leftOfConc + 25, bottomDist - RIGHT_SIDE_INSET, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n        //  g2d.drawOval(rightOfConc - 25 - RIGHT_SIDE_INSET, bottomDist - RIGHT_SIDE_INSET, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n          monthmatrixlayer.add(new Konva.Circle({\r\n            x: leftOfConc + 25,\r\n            y: bottomDist,\r\n            radius: RIGHT_SIDE_INSET/2,\r\n            // fill: reberColor,\r\n            stroke: reberColor,\r\n            strokeWidth: 1,\r\n          }));\r\n          monthmatrixlayer.add(new Konva.Circle({\r\n            x: rightOfConc - 25,\r\n            y: bottomDist,\r\n            radius: RIGHT_SIDE_INSET/2,\r\n            // fill: reberColor,\r\n            stroke: reberColor,\r\n            strokeWidth: 1,\r\n          }));\r\n       } \r\n     } \r\n     \r\n     else if (this.plotType==\"square column/beams (2-D)\") {\r\n       var depth2reinf = parseInt(Math.abs(topOfConc - bottomOfConc) * this.clearCover / this.thickness);\r\n    //    g2d.drawOval(leftOfConc + depth2reinf, topOfConc + depth2reinf, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n    //    g2d.drawOval(rightOfConc - depth2reinf - RIGHT_SIDE_INSET, topOfConc + depth2reinf, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n    //    g2d.drawOval(leftOfConc + depth2reinf, bottomOfConc - depth2reinf - RIGHT_SIDE_INSET, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n    //    g2d.drawOval(rightOfConc - depth2reinf - RIGHT_SIDE_INSET, bottomOfConc - depth2reinf - RIGHT_SIDE_INSET, RIGHT_SIDE_INSET, RIGHT_SIDE_INSET);\r\n          monthmatrixlayer.add(new Konva.Circle({\r\n            x: leftOfConc + depth2reinf,\r\n            y: topOfConc + depth2reinf  + (RIGHT_SIDE_INSET/2),\r\n            radius: RIGHT_SIDE_INSET/2,\r\n            // fill: reberColor,\r\n            stroke: reberColor,\r\n            strokeWidth: 1,\r\n          }));\r\n          monthmatrixlayer.add(new Konva.Circle({\r\n            x: rightOfConc - depth2reinf,\r\n            y: topOfConc + depth2reinf  + (RIGHT_SIDE_INSET/2),\r\n            radius: RIGHT_SIDE_INSET/2,\r\n            // fill: reberColor,\r\n            stroke: reberColor,\r\n            strokeWidth: 1,\r\n          }));\r\n          monthmatrixlayer.add(new Konva.Circle({\r\n            x: leftOfConc + depth2reinf,\r\n            y: bottomOfConc - depth2reinf - (RIGHT_SIDE_INSET/2),\r\n            radius: RIGHT_SIDE_INSET/2,\r\n            // fill: reberColor,\r\n            stroke: reberColor,\r\n            strokeWidth: 1,\r\n          }));\r\n          monthmatrixlayer.add(new Konva.Circle({\r\n            x: rightOfConc - depth2reinf,\r\n            y: bottomOfConc - depth2reinf - (RIGHT_SIDE_INSET/2),\r\n            radius: RIGHT_SIDE_INSET/2,\r\n            // fill: reberColor,\r\n            stroke: reberColor,\r\n            strokeWidth: 1,\r\n          }));\r\n     } \r\n     \r\n     else if (this.plotType==\"circular columns (2-D)\") {\r\n       centerX = parseInt((leftEdge + rightEdge) / 2);\r\n       var centerY = parseInt((topOfConc + bottomOfConc) / 2);\r\n       circleDiam = bottomOfConc - topOfConc;\r\n      //  rebarLayoutDiam = parseInt(circleDiam * (this.thickness - this.clearCover * 2) / this.thickness) - 5;\r\n       for (var i = 0; i < 16; i++) {\r\n         var radian = (i / 16) * 2 * Math.PI;\r\n         var x = parseInt(centerX + Math.sin(radian) * rebarLayoutDiam / 2);\r\n         var y = parseInt(centerY - Math.cos(radian) * rebarLayoutDiam / 2);\r\n         var width = 5, height = 5;\r\n        //  g2d.drawOval(x, y, 5, 5);\r\n          monthmatrixlayer.add(new Konva.Circle({\r\n            x: x,\r\n            y: y,\r\n            radius: 2,\r\n            // fill: reberColor,\r\n            stroke: reberColor,\r\n            strokeWidth: 1,\r\n          }));\r\n       } \r\n     } \r\n    // -------- step 4 Adding Rebbers/pillers ------\r\n\r\n    stage.add(monthmatrixlayer)\r\n    // ------------------\r\n  },\r\n  created() {\r\n  },\r\n  methods: {\r\n    convertPctConc_to_KgPerM3(value) {\r\n        return 2350.0 * value / 100.0;\r\n    },\r\n    convertPctConc_to_LbsPerY3(value) {\r\n        return 3949.0 * value / 100.0;\r\n    },\r\n    getRedefinedUnits(baseUnits) {\r\n      axios.get(`/change-units-string/${baseUnits}`).then((response) => {\r\n        const { data } = response\r\n        this.area_unit = data.area_unit\r\n        this.volume_unit = data.volume_unit\r\n        this.weight_unit = data.weight_unit\r\n        this.capacity_unit = data.capacity_unit\r\n        this.length_unit = data.length_unit\r\n        this.standard_length_unit = data.standard_length_unit\r\n      })\r\n    },\r\n    getMaximumModelableDepthGivenConcTypeAndUnits(project_data){\r\n        var pd=project_data;\r\n        if (pd.typeOfStructure==\"slabs and walls (1-D)\") {\r\n            if (pd.baseUnits==\"US units\")\r\n              {\r\n                return 10.0; \r\n              }\r\n            if (pd.baseUnits==\"Centimeter metric\")\r\n              {\r\n                return 25.0;\r\n              }\r\n          return 250.0;\r\n        }\r\n        \r\n        if (pd.baseUnits==\"US units\")\r\n            {\r\n              return 100.0;\r\n            }\r\n        if (pd.baseUnits==\"Centimeter metric\")\r\n            {\r\n              return 250.0;\r\n            }\r\n        return 2500.0; \r\n    },\r\n    getColor(colorIntensity){\r\n        if (colorIntensity >= 123.0) {\r\n            var scaleValue = Math.min(1.0, (colorIntensity - 123.0) / 123.0);\r\n            green = parseInt(scaleValue * 255.0);\r\n            red = 255 - parseInt(scaleValue * 255.0);\r\n            blue = 0;\r\n        }\r\n        else {\r\n            var scaleValue = Math.max(0.0, (colorIntensity - 0.0) / 122.0);\r\n            red = parseInt(scaleValue * 255.0);\r\n            blue = 255 - parseInt(scaleValue * 255.0);\r\n            green = 0;\r\n        } \r\n        \r\n        var red = Math.min(Math.max(0, red), 255);\r\n        var green = Math.min(Math.max(0, green), 255);\r\n        var blue = Math.min(Math.max(0, blue), 255);\r\n        \r\n        return `rgb(${red}, ${green}, ${blue})`;\r\n        }\r\n  },\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5[0].rules[0].use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./KonvaSLXSectionPlot.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5[0].rules[0].use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./KonvaSLXSectionPlot.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./KonvaSLXSectionPlot.vue?vue&type=template&id=4e350e0f&\"\nimport script from \"./KonvaSLXSectionPlot.vue?vue&type=script&lang=js&\"\nexport * from \"./KonvaSLXSectionPlot.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"figureCanvas\"}},[_c('v-stage',{ref:\"slsxStage\",attrs:{\"config\":_vm.configKonva}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n        injectStyles.call(\n          this,\n          (options.functional ? this.parent : this).$root.$options.shadowRoot\n        )\n      }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n"],"names":["metaInfo","title","components","KonvaSLXSectionPlot","props","projectData","serviceLifeResults","rebarSteelTypes","inhibitors","barrierTypes","colors","computed","mounted","created","data","userAgent","area_unit","volume_unit","capacity_unit","weight_unit","rebarSteelTypesOptions","inhibitorsOptions","serviceLifeGraphs","structure","concUnits","alternatives","activeAlternativeName","activeAlternativeDesc","barrierTypesOptions","visibleGraph","defaultColDef","flex","altColors","activeAlternativeIndex","needToRegenerateGraphs","needToCompute","methods","_vm","this","_h","$createElement","_self","_c","attrs","project","results","units","concentrationUnits","maxConcentration","allPoints","overallThickness","clearCover","iMonthOfInit","inheritAttrs","justSection","plotType","maxConc","thickness","iCurrentlyDisplayedMonth","configKonva","width","height","dFactor","maxModelDepth","currentlyDisplayedMonth","dDepthToServiceLifeModeledLine","length_unit","standard_length_unit","font_size_nrml","font_size_small","topOfConc","bottomOfConc","leftOfConc","widthOfConc","rightOfConc","heightOfConc","monthmatrixlayer","x","y","stroke","strokeWidth","points","text","fontSize","fontFamily","fill","align","rotation","centerX","circleDiam","rebarLayoutDiam","radiusX","radiusY","minConc","colFrac","rowFrac","matrixCol","matrixRow","conc","colorIntensity","closestDepthRow","radius","stage","convertPctConc_to_KgPerM3","value","convertPctConc_to_LbsPerY3","getRedefinedUnits","baseUnits","axios","getMaximumModelableDepthGivenConcTypeAndUnits","project_data","getColor","green","red","blue","ref","normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","concat","exports"],"sourceRoot":""}